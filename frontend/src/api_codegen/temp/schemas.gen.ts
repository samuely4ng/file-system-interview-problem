// This file is auto-generated by @hey-api/openapi-ts

export const $ChatMessage = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        session_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Session Id'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        timestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timestamp'
        },
        sender: {
            '$ref': '#/components/schemas/MessageSender'
        },
        depth: {
            type: 'integer',
            title: 'Depth',
            default: 0
        }
    },
    type: 'object',
    required: ['session_id', 'content', 'sender'],
    title: 'ChatMessage'
} as const;

export const $ChatSession = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        start_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Time'
        },
        end_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Time'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ChatSessionStatus'
                }
            ],
            default: 'setting_up'
        },
        instance_info: {
            anyOf: [
                {
                    oneOf: [
                        {
                            '$ref': '#/components/schemas/InstanceInfoDev'
                        }
                    ],
                    discriminator: {
                        propertyName: 'instance_type',
                        mapping: {
                            dev: '#/components/schemas/InstanceInfoDev'
                        }
                    }
                },
                {
                    type: 'null'
                }
            ],
            title: 'Instance Info'
        },
        githubRelation: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Githubrelation'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['user_id', 'instance_info'],
    title: 'ChatSession'
} as const;

export const $ChatSessionStatus = {
    type: 'string',
    enum: ['setting_up', 'running', 'tearing_down', 'stopped'],
    title: 'ChatSessionStatus'
} as const;

export const $CreateMessageRequest = {
    properties: {
        content: {
            type: 'string',
            title: 'Content'
        },
        temp_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Temp Id',
            description: 'If set, the id will be returned in the WebSocket response. The client can use this for deduplication.'
        }
    },
    type: 'object',
    required: ['content'],
    title: 'CreateMessageRequest'
} as const;

export const $CreateSessionRequest = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CreateSessionRequest'
} as const;

export const $EnvironmentGroup = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        githubRelation: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Githubrelation'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'EnvironmentGroup'
} as const;

export const $EnvironmentVariable = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        },
        group_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'EnvironmentVariable'
} as const;

export const $GithubAccessToken = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token'
        },
        installation_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Installation Id'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        },
        org_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Name'
        },
        org_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Id'
        },
        org_avatar_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Avatar Url'
        }
    },
    type: 'object',
    required: ['user_id', 'installation_id'],
    title: 'GithubAccessToken'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $InstanceInfoDev = {
    properties: {
        instance_type: {
            type: 'string',
            enum: ['dev'],
            const: 'dev',
            title: 'Instance Type',
            default: 'dev'
        },
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid'
        },
        web_app_base: {
            type: 'string',
            title: 'Web App Base'
        },
        vscode_base: {
            type: 'string',
            title: 'Vscode Base'
        },
        has_started_web_app: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Has Started Web App',
            default: false
        }
    },
    type: 'object',
    required: ['uuid', 'web_app_base', 'vscode_base'],
    title: 'InstanceInfoDev'
} as const;

export const $MessageSender = {
    type: 'string',
    enum: ['user', 'assistant'],
    title: 'MessageSender'
} as const;

export const $Note = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        },
        isSecret: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Issecret',
            default: false
        },
        githubRelation: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Githubrelation'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        },
        content_text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content Text'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'Note'
} as const;

export const $Page_ChatMessage_ = {
    properties: {
        items: {
            items: {
                '$ref': '#/components/schemas/ChatMessage'
            },
            type: 'array',
            title: 'Items'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['items', 'total', 'page', 'size'],
    title: 'Page[ChatMessage]'
} as const;

export const $Page_ChatSession_ = {
    properties: {
        items: {
            items: {
                '$ref': '#/components/schemas/ChatSession'
            },
            type: 'array',
            title: 'Items'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['items', 'total', 'page', 'size'],
    title: 'Page[ChatSession]'
} as const;

export const $User = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        company_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company Name'
        },
        github_username: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Github Username'
        },
        github_token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Github Token'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    title: 'User'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $WSSessionResponse = {
    properties: {
        session_id: {
            type: 'string',
            title: 'Session Id'
        },
        msg: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/WSSessionResponse_EnvironmentSetupDone'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_AssistantMessageStarted'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_NewMessage'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_BrowserShouldRefresh'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_ShellCommandExecuted'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_ConnectionEstablished'
                },
                {
                    '$ref': '#/components/schemas/WSSessionResponse_DebugMessage'
                }
            ],
            title: 'Msg',
            discriminator: {
                propertyName: 'msg_type',
                mapping: {
                    assistant_message_started: '#/components/schemas/WSSessionResponse_AssistantMessageStarted',
                    browser_should_refresh: '#/components/schemas/WSSessionResponse_BrowserShouldRefresh',
                    connection_established: '#/components/schemas/WSSessionResponse_ConnectionEstablished',
                    debug_message: '#/components/schemas/WSSessionResponse_DebugMessage',
                    environment_setup_done: '#/components/schemas/WSSessionResponse_EnvironmentSetupDone',
                    new_message: '#/components/schemas/WSSessionResponse_NewMessage',
                    shell_command_executed: '#/components/schemas/WSSessionResponse_ShellCommandExecuted'
                }
            }
        }
    },
    type: 'object',
    required: ['session_id', 'msg'],
    title: 'WSSessionResponse'
} as const;

export const $WSSessionResponse_AssistantMessageStarted = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['assistant_message_started'],
            const: 'assistant_message_started',
            title: 'Msg Type',
            default: 'assistant_message_started'
        },
        temp_id: {
            type: 'integer',
            title: 'Temp Id'
        }
    },
    type: 'object',
    required: ['temp_id'],
    title: 'WSSessionResponse_AssistantMessageStarted'
} as const;

export const $WSSessionResponse_BrowserShouldRefresh = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['browser_should_refresh'],
            const: 'browser_should_refresh',
            title: 'Msg Type',
            default: 'browser_should_refresh'
        }
    },
    type: 'object',
    title: 'WSSessionResponse_BrowserShouldRefresh'
} as const;

export const $WSSessionResponse_ConnectionEstablished = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['connection_established'],
            const: 'connection_established',
            title: 'Msg Type',
            default: 'connection_established'
        }
    },
    type: 'object',
    title: 'WSSessionResponse_ConnectionEstablished'
} as const;

export const $WSSessionResponse_DebugMessage = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['debug_message'],
            const: 'debug_message',
            title: 'Msg Type',
            default: 'debug_message'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['content'],
    title: 'WSSessionResponse_DebugMessage'
} as const;

export const $WSSessionResponse_EnvironmentSetupDone = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['environment_setup_done'],
            const: 'environment_setup_done',
            title: 'Msg Type',
            default: 'environment_setup_done'
        },
        instance_info: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/InstanceInfoDev'
                }
            ],
            title: 'Instance Info',
            discriminator: {
                propertyName: 'instance_type',
                mapping: {
                    dev: '#/components/schemas/InstanceInfoDev'
                }
            }
        }
    },
    type: 'object',
    required: ['instance_info'],
    title: 'WSSessionResponse_EnvironmentSetupDone'
} as const;

export const $WSSessionResponse_NewMessage = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['new_message'],
            const: 'new_message',
            title: 'Msg Type',
            default: 'new_message'
        },
        message: {
            '$ref': '#/components/schemas/ChatMessage'
        },
        temp_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Temp Id'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'WSSessionResponse_NewMessage'
} as const;

export const $WSSessionResponse_ShellCommandExecuted = {
    properties: {
        msg_type: {
            type: 'string',
            enum: ['shell_command_executed'],
            const: 'shell_command_executed',
            title: 'Msg Type',
            default: 'shell_command_executed'
        },
        command: {
            type: 'string',
            title: 'Command'
        }
    },
    type: 'object',
    required: ['command'],
    title: 'WSSessionResponse_ShellCommandExecuted'
} as const;