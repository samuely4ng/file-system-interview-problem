// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { RootGetResponse, GetUserUsersUserIdGetData, GetUserUsersUserIdGetResponse, UpdateUserUsersUserIdPutData, UpdateUserUsersUserIdPutResponse, AdminListUsersAdminListUsersGetResponse, CreateAccountUsersPostData, CreateAccountUsersPostResponse, CreateNoteUsersUserIdNotesPostData, CreateNoteUsersUserIdNotesPostResponse, GetUserNotesUsersUserIdNotesGetData, GetUserNotesUsersUserIdNotesGetResponse, UpdateNoteNotesNoteIdPutData, UpdateNoteNotesNoteIdPutResponse, DeleteNoteNotesNoteIdDeleteData, DeleteNoteNotesNoteIdDeleteResponse, CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostData, CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostResponse, GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetData, GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetResponse, UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutData, UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutResponse, GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetData, GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetResponse, DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteData, DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteResponse, AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostData, AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostResponse, DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteData, DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteResponse, EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutData, EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutResponse, GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetData, GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetResponse, CallbackUsersUserIdGithubAccessTokensPostData, CallbackUsersUserIdGithubAccessTokensPostResponse, GetUserGithubReposGithubAccessTokenAccessTokenReposGetData, GetUserGithubReposGithubAccessTokenAccessTokenReposGetResponse, GetMineSessionsMineGetData, GetMineSessionsMineGetResponse, CreateSessionSessionsPostData, CreateSessionSessionsPostResponse, GetSessionSessionsSessionIdGetData, GetSessionSessionsSessionIdGetResponse, GetMessagesSessionsSessionIdMessagesGetData, GetMessagesSessionsSessionIdMessagesGetResponse, CreateMessageSessionsSessionIdMessagesPostData, CreateMessageSessionsSessionIdMessagesPostResponse, DeleteAllMessagesSessionsSessionIdMessagesDeleteData, DeleteAllMessagesSessionsSessionIdMessagesDeleteResponse, DummyForTypeExportsSessionsDummyForTypeExportsGetResponse } from './types.gen';

/**
 * Root
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const rootGet = (): CancelablePromise<RootGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/'
}); };

/**
 * Get User
 * @param data The data for the request.
 * @param data.userId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getUserUsersUserIdGet = (data: GetUserUsersUserIdGetData): CancelablePromise<GetUserUsersUserIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update User
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns User Successful Response
 * @throws ApiError
 */
export const updateUserUsersUserIdPut = (data: UpdateUserUsersUserIdPutData): CancelablePromise<UpdateUserUsersUserIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/users/{user_id}',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Admin List Users
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const adminListUsersAdminListUsersGet = (): CancelablePromise<AdminListUsersAdminListUsersGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/admin/list_users'
}); };

/**
 * Create Account
 * @param data The data for the request.
 * @param data.requestBody
 * @returns User Successful Response
 * @throws ApiError
 */
export const createAccountUsersPost = (data: CreateAccountUsersPostData): CancelablePromise<CreateAccountUsersPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Note
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns Note Successful Response
 * @throws ApiError
 */
export const createNoteUsersUserIdNotesPost = (data: CreateNoteUsersUserIdNotesPostData): CancelablePromise<CreateNoteUsersUserIdNotesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/{user_id}/notes',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User Notes
 * @param data The data for the request.
 * @param data.userId
 * @returns Note Successful Response
 * @throws ApiError
 */
export const getUserNotesUsersUserIdNotesGet = (data: GetUserNotesUsersUserIdNotesGetData): CancelablePromise<GetUserNotesUsersUserIdNotesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}/notes',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Note
 * @param data The data for the request.
 * @param data.noteId
 * @param data.requestBody
 * @returns Note Successful Response
 * @throws ApiError
 */
export const updateNoteNotesNoteIdPut = (data: UpdateNoteNotesNoteIdPutData): CancelablePromise<UpdateNoteNotesNoteIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/notes/{note_id}',
    path: {
        note_id: data.noteId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Note
 * @param data The data for the request.
 * @param data.noteId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteNoteNotesNoteIdDelete = (data: DeleteNoteNotesNoteIdDeleteData): CancelablePromise<DeleteNoteNotesNoteIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/notes/{note_id}',
    path: {
        note_id: data.noteId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Environment Group
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns EnvironmentGroup Successful Response
 * @throws ApiError
 */
export const createEnvironmentGroupUsersUserIdEnvironmentGroupsPost = (data: CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostData): CancelablePromise<CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/{user_id}/environment_groups',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Environment Groups
 * @param data The data for the request.
 * @param data.userId
 * @returns EnvironmentGroup Successful Response
 * @throws ApiError
 */
export const getEnvironmentGroupsUsersUserIdEnvironmentGroupsGet = (data: GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetData): CancelablePromise<GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}/environment_groups',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Environment Group
 * @param data The data for the request.
 * @param data.groupId
 * @param data.userId
 * @param data.requestBody
 * @returns EnvironmentGroup Successful Response
 * @throws ApiError
 */
export const updateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPut = (data: UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutData): CancelablePromise<UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/users/{user_id}/environment_groups/{group_id}',
    path: {
        group_id: data.groupId,
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Environment Group
 * @param data The data for the request.
 * @param data.groupId
 * @param data.userId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGet = (data: GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetData): CancelablePromise<GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}/environment_groups/{group_id}',
    path: {
        group_id: data.groupId,
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Environment Group
 * @param data The data for the request.
 * @param data.groupId
 * @returns string Successful Response
 * @throws ApiError
 */
export const deleteEnvironmentGroupEnvironmentGroupsGroupIdDelete = (data: DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteData): CancelablePromise<DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/environment_groups/{group_id}',
    path: {
        group_id: data.groupId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Add Environment Variables
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns EnvironmentVariable Successful Response
 * @throws ApiError
 */
export const addEnvironmentVariablesUsersUserIdEnvironmentVariablesPost = (data: AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostData): CancelablePromise<AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/{user_id}/environment_variables',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Environment Variable
 * @param data The data for the request.
 * @param data.variableId
 * @param data.userId
 * @returns string Successful Response
 * @throws ApiError
 */
export const deleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDelete = (data: DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteData): CancelablePromise<DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users/{user_id}/environment_variables/{variable_id}',
    path: {
        variable_id: data.variableId,
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Edit Environment Variable
 * @param data The data for the request.
 * @param data.variableId
 * @param data.userId
 * @param data.requestBody
 * @returns EnvironmentVariable Successful Response
 * @throws ApiError
 */
export const editEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPut = (data: EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutData): CancelablePromise<EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/users/{user_id}/environment_variables/{variable_id}',
    path: {
        variable_id: data.variableId,
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User Github Access Tokens
 * @param data The data for the request.
 * @param data.userId
 * @returns GithubAccessToken Successful Response
 * @throws ApiError
 */
export const getUserGithubAccessTokensUsersUserIdGithubAccessTokensGet = (data: GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetData): CancelablePromise<GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}/github/access_tokens',
    path: {
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Callback
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns GithubAccessToken Successful Response
 * @throws ApiError
 */
export const callbackUsersUserIdGithubAccessTokensPost = (data: CallbackUsersUserIdGithubAccessTokensPostData): CancelablePromise<CallbackUsersUserIdGithubAccessTokensPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/{user_id}/github/access_tokens',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User Github Repos
 * @param data The data for the request.
 * @param data.accessToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getUserGithubReposGithubAccessTokenAccessTokenReposGet = (data: GetUserGithubReposGithubAccessTokenAccessTokenReposGetData): CancelablePromise<GetUserGithubReposGithubAccessTokenAccessTokenReposGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/github/access_token/{access_token}/repos',
    path: {
        access_token: data.accessToken
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Mine
 * @param data The data for the request.
 * @param data.page Page number
 * @param data.size Page size
 * @returns Page_ChatSession_ Successful Response
 * @throws ApiError
 */
export const getMineSessionsMineGet = (data: GetMineSessionsMineGetData = {}): CancelablePromise<GetMineSessionsMineGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/sessions/mine',
    query: {
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Session
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ChatSession Successful Response
 * @throws ApiError
 */
export const createSessionSessionsPost = (data: CreateSessionSessionsPostData): CancelablePromise<CreateSessionSessionsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/sessions/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Session
 * @param data The data for the request.
 * @param data.sessionId
 * @param data.page Page number
 * @param data.size Page size
 * @returns Page_ChatSession_ Successful Response
 * @throws ApiError
 */
export const getSessionSessionsSessionIdGet = (data: GetSessionSessionsSessionIdGetData): CancelablePromise<GetSessionSessionsSessionIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/sessions/{session_id}',
    path: {
        session_id: data.sessionId
    },
    query: {
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Messages
 * @param data The data for the request.
 * @param data.sessionId
 * @param data.page Page number
 * @param data.size Page size
 * @returns Page_ChatMessage_ Successful Response
 * @throws ApiError
 */
export const getMessagesSessionsSessionIdMessagesGet = (data: GetMessagesSessionsSessionIdMessagesGetData): CancelablePromise<GetMessagesSessionsSessionIdMessagesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/sessions/{session_id}/messages',
    path: {
        session_id: data.sessionId
    },
    query: {
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Message
 * @param data The data for the request.
 * @param data.sessionId
 * @param data.requestBody
 * @returns ChatMessage Successful Response
 * @throws ApiError
 */
export const createMessageSessionsSessionIdMessagesPost = (data: CreateMessageSessionsSessionIdMessagesPostData): CancelablePromise<CreateMessageSessionsSessionIdMessagesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/sessions/{session_id}/messages',
    path: {
        session_id: data.sessionId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete All Messages
 * @param data The data for the request.
 * @param data.sessionId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteAllMessagesSessionsSessionIdMessagesDelete = (data: DeleteAllMessagesSessionsSessionIdMessagesDeleteData): CancelablePromise<DeleteAllMessagesSessionsSessionIdMessagesDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/sessions/{session_id}/messages',
    path: {
        session_id: data.sessionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Dummy For Type Exports
 * @returns WSSessionResponse Successful Response
 * @throws ApiError
 */
export const dummyForTypeExportsSessionsDummyForTypeExportsGet = (): CancelablePromise<DummyForTypeExportsSessionsDummyForTypeExportsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/sessions/_dummy_for_type_exports'
}); };