// This file is auto-generated by @hey-api/openapi-ts

export type ChatMessage = {
    id?: string | null;
    session_id: string | null;
    content: string;
    timestamp?: string | null;
    sender: MessageSender;
    depth?: number;
};

export type ChatSession = {
    id?: string | null;
    user_id: string | null;
    name?: string | null;
    start_time?: string | null;
    end_time?: string | null;
    status?: ChatSessionStatus;
    instance_info: InstanceInfoDev | null;
    githubRelation?: Array<(string)> | null;
    created_at?: string | null;
    updated_at?: string | null;
};

export type ChatSessionStatus = 'setting_up' | 'running' | 'tearing_down' | 'stopped';

export type CreateMessageRequest = {
    content: string;
    /**
     * If set, the id will be returned in the WebSocket response. The client can use this for deduplication.
     */
    temp_id?: number | null;
};

export type CreateSessionRequest = {
    name: string;
};

export type EnvironmentGroup = {
    id?: string | null;
    user_id: string | null;
    name?: string | null;
    description?: string | null;
    githubRelation?: Array<(string)> | null;
    created_at?: string | null;
    updated_at?: string | null;
};

export type EnvironmentVariable = {
    id?: string | null;
    user_id: string | null;
    key?: string | null;
    value?: string | null;
    created_at?: string | null;
    updated_at?: string | null;
    group_id?: string | null;
};

export type GithubAccessToken = {
    id?: string | null;
    user_id: string | null;
    token?: string | null;
    installation_id: number | null;
    created_at?: string | null;
    updated_at?: string | null;
    org_name?: string | null;
    org_id?: number | null;
    org_avatar_url?: string | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InstanceInfoDev = {
    instance_type?: 'dev';
    uuid: string;
    web_app_base: string;
    vscode_base: string;
    has_started_web_app?: boolean | null;
};

export type instance_type = 'dev';

export type MessageSender = 'user' | 'assistant';

export type Note = {
    id?: string | null;
    user_id: string | null;
    title?: string | null;
    content?: string | null;
    isSecret?: boolean | null;
    githubRelation?: Array<(string)> | null;
    created_at?: string | null;
    updated_at?: string | null;
    content_text?: string | null;
};

export type Page_ChatMessage_ = {
    items: Array<ChatMessage>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type Page_ChatSession_ = {
    items: Array<ChatSession>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type User = {
    id?: string | null;
    email?: string | null;
    company_name?: string | null;
    github_username?: string | null;
    github_token?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    created_at?: string | null;
    updated_at?: string | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type WSSessionResponse = {
    session_id: string;
    msg: WSSessionResponse_EnvironmentSetupDone | WSSessionResponse_AssistantMessageStarted | WSSessionResponse_NewMessage | WSSessionResponse_BrowserShouldRefresh | WSSessionResponse_ShellCommandExecuted | WSSessionResponse_ConnectionEstablished | WSSessionResponse_DebugMessage;
};

export type WSSessionResponse_AssistantMessageStarted = {
    msg_type?: 'assistant_message_started';
    temp_id: number;
};

export type msg_type = 'assistant_message_started';

export type WSSessionResponse_BrowserShouldRefresh = {
    msg_type?: 'browser_should_refresh';
};

export type msg_type2 = 'browser_should_refresh';

export type WSSessionResponse_ConnectionEstablished = {
    msg_type?: 'connection_established';
};

export type msg_type3 = 'connection_established';

export type WSSessionResponse_DebugMessage = {
    msg_type?: 'debug_message';
    content: string;
};

export type msg_type4 = 'debug_message';

export type WSSessionResponse_EnvironmentSetupDone = {
    msg_type?: 'environment_setup_done';
    instance_info: InstanceInfoDev;
};

export type msg_type5 = 'environment_setup_done';

export type WSSessionResponse_NewMessage = {
    msg_type?: 'new_message';
    message: ChatMessage;
    temp_id?: number | null;
};

export type msg_type6 = 'new_message';

export type WSSessionResponse_ShellCommandExecuted = {
    msg_type?: 'shell_command_executed';
    command: string;
};

export type msg_type7 = 'shell_command_executed';

export type RootGetResponse = unknown;

export type GetUserUsersUserIdGetData = {
    userId: string;
};

export type GetUserUsersUserIdGetResponse = unknown;

export type UpdateUserUsersUserIdPutData = {
    requestBody: User;
    userId: string;
};

export type UpdateUserUsersUserIdPutResponse = User;

export type AdminListUsersAdminListUsersGetResponse = unknown;

export type CreateAccountUsersPostData = {
    requestBody: User;
};

export type CreateAccountUsersPostResponse = User;

export type CreateNoteUsersUserIdNotesPostData = {
    requestBody: Note;
    userId: string;
};

export type CreateNoteUsersUserIdNotesPostResponse = Note;

export type GetUserNotesUsersUserIdNotesGetData = {
    userId: string;
};

export type GetUserNotesUsersUserIdNotesGetResponse = Array<Note>;

export type UpdateNoteNotesNoteIdPutData = {
    noteId: string;
    requestBody: Note;
};

export type UpdateNoteNotesNoteIdPutResponse = Note;

export type DeleteNoteNotesNoteIdDeleteData = {
    noteId: string;
};

export type DeleteNoteNotesNoteIdDeleteResponse = unknown;

export type CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostData = {
    requestBody: EnvironmentGroup;
    userId: string;
};

export type CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostResponse = EnvironmentGroup;

export type GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetData = {
    userId: string;
};

export type GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetResponse = Array<EnvironmentGroup>;

export type UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutData = {
    groupId: string;
    requestBody: EnvironmentGroup;
    userId: string;
};

export type UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutResponse = EnvironmentGroup;

export type GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetData = {
    groupId: string;
    userId: string;
};

export type GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetResponse = unknown;

export type DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteData = {
    groupId: string;
};

export type DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteResponse = string;

export type AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostData = {
    requestBody: Array<EnvironmentVariable>;
    userId: string;
};

export type AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostResponse = Array<EnvironmentVariable>;

export type DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteData = {
    userId: string;
    variableId: string;
};

export type DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteResponse = string;

export type EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutData = {
    requestBody: EnvironmentVariable;
    userId: string;
    variableId: string;
};

export type EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutResponse = EnvironmentVariable;

export type GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetData = {
    userId: string;
};

export type GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetResponse = Array<GithubAccessToken>;

export type CallbackUsersUserIdGithubAccessTokensPostData = {
    requestBody: {
        [key: string]: unknown;
    };
    userId: string;
};

export type CallbackUsersUserIdGithubAccessTokensPostResponse = GithubAccessToken;

export type GetUserGithubReposGithubAccessTokenAccessTokenReposGetData = {
    accessToken: string;
};

export type GetUserGithubReposGithubAccessTokenAccessTokenReposGetResponse = Array<{
    [key: string]: unknown;
}>;

export type GetMineSessionsMineGetData = {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
};

export type GetMineSessionsMineGetResponse = Page_ChatSession_;

export type CreateSessionSessionsPostData = {
    requestBody: CreateSessionRequest;
};

export type CreateSessionSessionsPostResponse = ChatSession;

export type GetSessionSessionsSessionIdGetData = {
    /**
     * Page number
     */
    page?: number;
    sessionId: string;
    /**
     * Page size
     */
    size?: number;
};

export type GetSessionSessionsSessionIdGetResponse = Page_ChatSession_;

export type GetMessagesSessionsSessionIdMessagesGetData = {
    /**
     * Page number
     */
    page?: number;
    sessionId: string;
    /**
     * Page size
     */
    size?: number;
};

export type GetMessagesSessionsSessionIdMessagesGetResponse = Page_ChatMessage_;

export type CreateMessageSessionsSessionIdMessagesPostData = {
    requestBody: CreateMessageRequest;
    sessionId: string;
};

export type CreateMessageSessionsSessionIdMessagesPostResponse = ChatMessage;

export type DeleteAllMessagesSessionsSessionIdMessagesDeleteData = {
    sessionId: string;
};

export type DeleteAllMessagesSessionsSessionIdMessagesDeleteResponse = {
    [key: string]: unknown;
};

export type DummyForTypeExportsSessionsDummyForTypeExportsGetResponse = WSSessionResponse;

export type $OpenApiTs = {
    '/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/users/{user_id}': {
        get: {
            req: GetUserUsersUserIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateUserUsersUserIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: User;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/admin/list_users': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/users': {
        post: {
            req: CreateAccountUsersPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: User;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/notes': {
        post: {
            req: CreateNoteUsersUserIdNotesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Note;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetUserNotesUsersUserIdNotesGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<Note>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/notes/{note_id}': {
        put: {
            req: UpdateNoteNotesNoteIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: Note;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteNoteNotesNoteIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/environment_groups': {
        post: {
            req: CreateEnvironmentGroupUsersUserIdEnvironmentGroupsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: EnvironmentGroup;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetEnvironmentGroupsUsersUserIdEnvironmentGroupsGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<EnvironmentGroup>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/environment_groups/{group_id}': {
        put: {
            req: UpdateEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: EnvironmentGroup;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetEnvironmentGroupUsersUserIdEnvironmentGroupsGroupIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/environment_groups/{group_id}': {
        delete: {
            req: DeleteEnvironmentGroupEnvironmentGroupsGroupIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/environment_variables': {
        post: {
            req: AddEnvironmentVariablesUsersUserIdEnvironmentVariablesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<EnvironmentVariable>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/environment_variables/{variable_id}': {
        delete: {
            req: DeleteEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: string;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: EditEnvironmentVariableUsersUserIdEnvironmentVariablesVariableIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: EnvironmentVariable;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/{user_id}/github/access_tokens': {
        get: {
            req: GetUserGithubAccessTokensUsersUserIdGithubAccessTokensGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GithubAccessToken>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CallbackUsersUserIdGithubAccessTokensPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: GithubAccessToken;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/github/access_token/{access_token}/repos': {
        get: {
            req: GetUserGithubReposGithubAccessTokenAccessTokenReposGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<{
                    [key: string]: unknown;
                }>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sessions/mine': {
        get: {
            req: GetMineSessionsMineGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Page_ChatSession_;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sessions/': {
        post: {
            req: CreateSessionSessionsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: ChatSession;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sessions/{session_id}': {
        get: {
            req: GetSessionSessionsSessionIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Page_ChatSession_;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sessions/{session_id}/messages': {
        get: {
            req: GetMessagesSessionsSessionIdMessagesGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Page_ChatMessage_;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateMessageSessionsSessionIdMessagesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: ChatMessage;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteAllMessagesSessionsSessionIdMessagesDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/sessions/_dummy_for_type_exports': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: WSSessionResponse;
            };
        };
    };
};